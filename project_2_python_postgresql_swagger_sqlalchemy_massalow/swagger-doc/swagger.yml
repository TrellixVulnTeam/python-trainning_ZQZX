swagger: "2.0"
info:
  description: This is the swagger file that goes with our server code
  version: "1.0.0"
  title: Swagger REST Article
consumes:
  - "application/json"
produces:
  - "application/json"

basePath: "/api"

# Paths supported by the server application
paths:
  /login: 
    ##### Login #####
    put:
      operationId: controllers.user.login
      tags:
        - Login && Logout
      summary: Login
      description: Login
      parameters:
      - name: account
        in: body
        description: account
        required: True
        schema:
          type: object
          properties:
            username:         
              type: string
            password: 
              type: string
          required:
            - username
            - password
      responses:
        200:
          description: "Login successfull"
          schema:
            type: array
            items:
              $ref: "#/definitions/User"

  /logout: 
    ##### Login #####
    get:
      operationId: controllers.user.logout
      tags:
        - Login && Logout
      summary: Logout
      description: Logout
      responses:
        200:
          description: "Logout successfull"

  /user:
    ##### USER - GET #####
    get:
      operationId: controllers.user.get_all_user
      tags:
        - User
      summary: Get all list user
      description: Get all list user
      parameters:
      - name: page_number
        in: query
        description: page number for pagination
        type: integer
        required: False
      - name: page_size
        in: query
        description: page size for pagination
        type: integer
        required: False
      responses:
        200:
          description: "Successful get list users"
          schema:
            type: array
            items: 
              $ref: "#/definitions/User"

    ##### USER - POST #####
    post:
      operationId: controllers.user.create
      tags:
        - User
      summary: Create a new user
      description: Create a new user
      parameters:
        - name: user
          in: body
          description: personal infomation
          required: True
          schema:
            $ref: "#/definitions/User"
      responses:
        200:
          description: Successfully created person
          schema:
            $ref: "#/definitions/User"

    ##### USER - UPDATE #####
    put:
      operationId: controllers.user.update
      tags:
        - User
      summary: Update an exist user
      description: Create an exist user
      parameters:
        - name: user
          in: body
          description: personal infomation
          required: True
          schema:
            $ref: "#/definitions/User"
      responses:
        200:
          description: Successfully created person
          schema:
            type: array
            items:
              $ref: "#/definitions/User"

  /user/{username}:
    get:
      operationId: controllers.user.get_one
      tags:
        - User
      summary: Get one user by id
      description: Get one user by username
      parameters:
        - name: username
          in: path
          description: Id of the user to get
          type: string
          required: True
      responses:
        200:
          description: Successfully read user from data operation
          schema:
            $ref: "#/definitions/User"
    
    delete: 
      operationId: controllers.user.delete
      tags:
        - User
      summary: Delete user by username
      description:  Delete user by username
      parameters:
        - name: username
          in: path
          description: Id of the user to delete
          type: integer
          required: True
      responses:
        200:
          description: Successfully delete user
          schema:
            type: array
            items:
              $ref: "#/definitions/User"

  /resource:
    ##### resource - GET #####
    put:
      operationId: controllers.resource.get_all_resource
      tags:
        - Resource
      summary: Get all resource of user
      description: GGet all resource of user
      parameters:
        - name: account
          in: body
          description: account
          required: True
          schema:
            type: object
            properties:
              username:         
                type: string
              password: 
                type: string
            required:
              - username
              - password
      responses:
        200:
          description: "Successful get list users"


  /tree_user/{id}:
    get:
      operationId: controllers.user.tree_user
      tags:
        - User
      summary: Get user tree
      description: Get user tree
      parameters:
        - name: id
          in: path
          description: Id of the user to get all sub user
          type: integer
          required: True
      responses:
        200:
          description: Successfully get tree user


############################# DATABASE MODEL ########################################
definitions:
  User:
    type: object
    properties:
      # user_id: 
      #   type: integer
      #   description: id user
      superior_id:
        type: integer
        description: id of manager
      username:
        type: string
        description: user name
      password:
        type: string
        description: password
      fullname: 
        type: string
        description: fullname
      role: 
        type: string
        enum: 
        - admin
        - manager
        - employee
        description: role of user
      dob:
        type: string
        description: date of bird
        # pattern: '([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))'
      address:
        type: string
        description: address
      phonenumber:
        type: string
        description: phone
      email:
        type: string
  Resource: 
    type: object
    properties:
      id_resource: 
        type: integer
        description: id resource
      table_name: 
        type: string
        description: name of table to mapping
      id_table_mapping: 
        type: integer
        description: id want to mapping
      role:
        type: string
        enum: 
        - admin
        - manager
        - employee
        description: role of user